#!/usr/bin/env groovy
import groovy.json.JsonSlurper

properties([parameters([ \
    choice(choices: "DEV\nALPHA\nBETA\n", description: 'Environment where to run this job.', name: 'ENVIRONMENT'), \
    choice(choices: "browsers/chrome/CHROME59.json\nbrowsers/chrome/CHROME.json\nbrowsers/edge/EDGE.json\nbrowsers/firefox/FIREFOX53.json\nbrowsers/firefox/FIREFOX.json\nbrowsers/ie/IE.json", description: 'Choose the browser', name: 'BROWSER'), \
    choice(choices: "os/WIN10.json", description: 'Choose the OS', name: 'OS'), \
    choice(choices: "resolutions/1280x1024.json", description: 'Choose the resolution', name: 'RESOLUTION'), \
    string(defaultValue: '', description: '', name: 'KEYWORDS'), \
    string(defaultValue: '', description: '', name: 'MARKERS'), \
    booleanParam(defaultValue: false, description: 'Report test execution on Testrail', name: 'TESTRAIL_ENABLE'), \
    booleanParam(defaultValue: false, description: 'Enable browserstack debug (it might slow down test executions)', name: 'DEBUG'), \
    booleanParam(defaultValue: false, description: 'Block on first failure', name: 'BLOCK_FIRST_FAILURE'), \
    string(defaultValue: '', description: 'Number of parallel executions. Leave empty if want a sequential test execution or set the desired number of parallelism (eg: 2)', name: 'PARALLEL_SESSIONS'), \
    string(defaultValue: '', description: 'You can specify an alternative selenium grid url', name: 'SELENIUM_GRID_URL') \
]), pipelineTriggers([])])

node('browserstack') {
    // notifyMessage("start");

    stage('Checkout') {
        checkout scm
    }

    try {
        stage('Run Test'){
            env.ENVIRONMENT = params.ENVIRONMENT
            env.MARKERS = params.MARKERS
            env.KEYWORDS = params.KEYWORDS
            env.OS = params.OS
            env.BROWSER = params.BROWSER
            env.PARALLEL_SESSIONS = params.PARALLEL_SESSIONS
            env.RESOLUTION = params.RESOLUTION
            env.DEBUG = params.DEBUG
            env.TESTRAIL_ENABLE = params.TESTRAIL_ENABLE
            env.BLOCK_FIRST_FAILURE = params.BLOCK_FIRST_FAILURE
            env.SELENIUM_GRID_URL = params.SELENIUM_GRID_URL

            sh "./ci.py"
        }

        // notifyMessage("success")
    }
    catch (exception) {
        // notifyMessage("error")
        throw exception
    }
}

/*
def notifyMessage(String status) {
    def colorSet = ["start": "warning", "success": "good", "error": "danger"]
    def message = "${status} - Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"

    slackSend(color: "${colorSet[status]}",
            channel: '#deployments',
            message: "${message}",
            teamDomain: 'team-domain',
            token: 'TOKEN')
}
*/
